var fs = require('fs'),
 probe = require('node-ffprobe'),
     _ = require('lodash');


/**
 * Converts hh:mm:ss.s only to seconds (float)
 */
function hmsToSecondsOnly(str) {
    var p = str.split(':'),
        s = 0, m = 1;

    while (p.length > 0) {
        s += m * parseFloat(p.pop());
        m *= 60;
    }
    return s;
}

function getFileExtension(fileName) {
    return fileName.substr((Math.max(0, fileName.lastIndexOf(".")) || Infinity) + 1);
}

function nameWithoutExt(fileName) {
    return fileName.substr(0, fileName.lastIndexOf('.'));
}

function isAudio(filename) {
    var ext = getFileExtension(filename);
    if ((ext == 'mp3') || (ext == 'ogg') || (ext == 'wav') || (ext == 'flac')) return true;
}

module.exports = function (options) {
    var FileInfo = function (file) {
        //console.log(JSON.stringify(file));
        this.name = file.name;
        this.originalName = file.name;
        this.size = file.size;
        this.type = file.type;
        this.delete_type = 'DELETE';
        this.path = "public/uploads/";
        this.transcript = false;
    };

    FileInfo.prototype.getMetadata = function (callback) {
        var file = options.baseDir() + this.name;
       // console.log('file ' + file);
        var self = this;
        try {
            if (isAudio(this.name)) {
                probe(file, function (err, probeData) {
                    //console.log("probe chyba: " + err);
                    console.log("probe data: " + JSON.stringify(probeData));
                    if (err == null) {
                        if (typeof probeData != "undefined") {
                            if (probeData.streams != null) {
                                self.duration = probeData.streams[0].duration;
                                self.sampleRate = probeData.streams[0].sample_rate;
                            }
                        }
                    }
                    callback();
                });
            }
            else {
                self.transcript = true;
                callback();
            }
        }
        catch (err) {
            console.log("Error: probe can't read required data");
        }
    };

    FileInfo.prototype.convert = function (callback) {
        var file = (options.baseDir() + this.name);
        //console.log('ffmpeg -y -i "' + file + '" -acodec libvorbis -aq 50 "' + nameWithoutExt(file) + '.ogg"');

        if (getFileExtension(this.name) == "mp3") {
            require('child_process').exec('ffmpeg -y -i "' + file + '" -acodec libvorbis "' + nameWithoutExt(file) + '.ogg"', function (error, stdout, stderr) {
                //console.log("prevod hotov" + stdout +  stderr);
                callback();
            });
        }
        else if (getFileExtension(this.name) == "ogg") {
            require('child_process').exec('ffmpeg -i "' + file + '" -ab 192 -f mp3 "' + nameWithoutExt(file) + '.mp3"', function (error, stdout, stderr) {
                //console.log("prevod hotov" + stdout + stderr);
                callback();
            });
        }
        else if ((getFileExtension(this.name) == "wav") || (getFileExtension(this.name) == "flac")) {
            // convert to mp3
            require('child_process').exec('ffmpeg -i "' + file + '" -ab 192 -f mp3 "' + nameWithoutExt(file) + '.mp3"', function (error, stdout, stderr) {
                // after converting to mp3, convert to ogg
                require('child_process').exec('ffmpeg -y -i "' + file + '" -acodec libvorbis -aq 50 "' + nameWithoutExt(file) + '.ogg"', function (error, stdout, stderr) {
                   // console.log("prevod hotov" + stdout + stderr);
                    callback();
                });

            });
        }
        else {
            callback();
        }
    };


    FileInfo.prototype.validate = function () {
        if (options.minFileSize && options.minFileSize > this.size) {
            this.error = 'File is too small';
        } else if (options.maxFileSize && options.maxFileSize < this.size) {
            this.error = 'File is too big';
        } else if (!options.acceptFileTypes.test(this.name)) {
            this.error = 'Filetype not allowed';
        }
        return !this.error;
    };

    FileInfo.prototype.safeName = function () {
        // Prevent directory traversal and creating hidden system files:
        this.name = require('path').basename(this.name).replace(/^\.+/, '');
        // Prevent overwriting existing files:
        while (fs.existsSync(options.baseDir() + '/' + this.name)) {
            this.name = this.name.replace(/(?:(?: \(([\d]+)\))?(\.[^.]+))?$/, function (s, index, ext) {
                return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');
            });
        }
    };

    FileInfo.prototype.setUrl = function (type, baseUrl) {
        var key = type ? type + '_url' : 'url';
        this[key] = baseUrl + '/' + encodeURIComponent(this.name);
    }

    return FileInfo;
};